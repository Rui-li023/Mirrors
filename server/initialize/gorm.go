package initialize

import (
	"gorm.io/plugin/dbresolver"
	"os"

	"github.com/flipped-aurora/gin-vue-admin/server/global"
	"github.com/flipped-aurora/gin-vue-admin/server/initialize/internal"
	"github.com/flipped-aurora/gin-vue-admin/server/model/autocode"
	"github.com/flipped-aurora/gin-vue-admin/server/model/example"
	"github.com/flipped-aurora/gin-vue-admin/server/model/system"

	"go.uber.org/zap"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

//@author: SliverHorn
//@function: Gorm
//@description: 初始化数据库并产生数据库全局变量
//@return: *gorm.DB

func Gorm() *gorm.DB {
	switch global.GVA_CONFIG.System.DbType {
	case "mysql":
		return GormMysql()
	default:
		return GormMysql()
	}
}

// MysqlTables
//@author: SliverHorn
//@function: MysqlTables
//@description: 注册数据库表专用
//@param: db *gorm.DB

func MysqlTables(db *gorm.DB) {
	err := db.AutoMigrate(
		system.SysUser{},
		system.SysAuthority{},
		system.SysApi{},
		system.SysBaseMenu{},
		system.SysBaseMenuParameter{},
		system.JwtBlacklist{},
		system.SysDictionary{},
		system.SysDictionaryDetail{},
		example.ExaFileUploadAndDownload{},
		example.ExaFile{},
		example.ExaFileChunk{},
		example.ExaCustomer{},
		system.SysOperationRecord{},
		system.SysAutoCodeHistory{},
		// Code generated by github.com/flipped-aurora/gin-vue-admin/server Begin; DO NOT EDIT.
		autocode.AutoCodeExample{},
		// Code generated by github.com/flipped-aurora/gin-vue-admin/server End; DO NOT EDIT.
	)
	if err != nil {
		global.GVA_LOG.Error("register table failed", zap.Any("err", err))
		os.Exit(0)
	}
	global.GVA_LOG.Info("register table success")
}

//@author: SliverHorn
//@function: GormMysql
//@description: 初始化Mysql数据库
//@return: *gorm.DB

func GormMysql() *gorm.DB {
	var DB_MAIN *gorm.DB
	mysqlMaster := global.GVA_CONFIG.MysqlMaster
	mysqlSlaves := global.GVA_CONFIG.MysqlSlaves
	mysqlConfig := global.GVA_CONFIG.MysqlConfig
	address := mysqlMaster.Username + ":" + mysqlMaster.Password + "@tcp(" + mysqlMaster.Path + ")/" + mysqlConfig.Dbname + "?" + mysqlConfig.Config
	master := CreateMysql(address)
	if db, err := gorm.Open(master, gormConfig()); err != nil {
		//if db, err := gorm.Open(master, &gorm.Config{SkipDefaultTransaction: true}); err != nil {
		global.GVA_LOG.Error("MySQL主库启动异常", zap.Error(err))
		return nil
	} else {
		global.GVA_LOG.Debug("----mysql主库建立链接成功----")
		sqlDB, _ := db.DB()
		sqlDB.SetMaxIdleConns(global.GVA_CONFIG.MysqlConfig.MaxIdleConns)
		sqlDB.SetMaxOpenConns(global.GVA_CONFIG.MysqlConfig.MaxOpenConns)
		DB_MAIN = db
	}
	var slaves []gorm.Dialector
	// 配置从库
	for _, dbConfig := range mysqlSlaves {
		slaveAddress := dbConfig.Username + ":" + dbConfig.Password + "@tcp(" + dbConfig.Path + ")/" + mysqlConfig.Dbname + "?" + mysqlConfig.Config
		slaves = append(slaves, CreateMysql(slaveAddress))
	}
	if len(slaves) > 0 {
		if err := DB_MAIN.Use(dbresolver.Register(dbresolver.Config{
			Sources:  []gorm.Dialector{master},
			Replicas: slaves,
			// sources/replicas 负载均衡策略
			Policy: dbresolver.RandomPolicy{},
		})); err != nil {
			global.GVA_LOG.Error("MySQL从库启动异常", zap.Error(err))
		} else {
			global.GVA_LOG.Debug("MySQL从库链接建立成功", zap.Any("mysql", slaves), zap.String("dbname", mysqlConfig.Dbname))
		}
	}
	return DB_MAIN
}

func CreateMysql(address string) gorm.Dialector {
	return mysql.New(mysql.Config{
		DSN:                       address, // data source name, refer https://github.com/go-sql-driver/mysql#dsn-data-source-name
		DefaultStringSize:         256,     // add default size for string fields, by default, will use db type `longtext` for fields without size, not a primary key, no index defined and don't have default values
		DisableDatetimePrecision:  true,    // disable datetime precision support, which not supported before MySQL 5.6
		DontSupportRenameIndex:    true,    // drop & create index when rename index, rename index not supported before MySQL 5.7, MariaDB
		DontSupportRenameColumn:   true,    // use change when rename column, rename rename not supported before MySQL 8, MariaDB
		SkipInitializeWithVersion: false,   // smart configure based on used version
	})
}
//@author: SliverHorn
//@function: gormConfig
//@description: 根据配置决定是否开启日志
//@param: mod bool
//@return: *gorm.Config

func gormConfig() *gorm.Config {
	config := &gorm.Config{DisableForeignKeyConstraintWhenMigrating: true}
	switch global.GVA_CONFIG.MysqlConfig.LogMode {
	case "silent", "Silent":
		config.Logger = internal.Default.LogMode(logger.Silent)
	case "error", "Error":
		config.Logger = internal.Default.LogMode(logger.Error)
	case "warn", "Warn":
		config.Logger = internal.Default.LogMode(logger.Warn)
	case "info", "Info":
		config.Logger = internal.Default.LogMode(logger.Info)
	default:
		config.Logger = internal.Default.LogMode(logger.Info)
	}
	return config
}